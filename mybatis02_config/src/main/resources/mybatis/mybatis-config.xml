<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--    &lt;!&ndash;-->
    <!--    1、mybatis可以使用properties来引入外部properties配置文件的内容；-->
    <!--        resource：引入类路径下的资源-->
    <!--        url：引入网络路径或者磁盘路径下的资源-->
    <!--    &ndash;&gt;-->
    <!--    <properties resource="dbconfig.properties"/>-->

    <!--===================================================================================-->
    <!--
    2、settings: 包含很多重要的设置项
        setting: 用来设置每一个设置项
            name：设置项名
            value：设置项取值
    -->
    <settings>
        <!-- 开启驼峰命名法映射-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- 开启sql日志打印-->
        <setting name="logImpl" value="STDOUT_LOGGING"/>
        <!-- 针对oracle空值参数获取绑定类型处理-->
        <setting name="jdbcTypeForNull" value="NULL"/>
        <!-- 开启懒加载功能 -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 侵入懒加载机制，步查询关联属性在用到时才执行查询-->
        <setting name="aggressiveLazyLoading" value="false"/>
    </settings>

    <!--===================================================================================-->
    <!-- 3、typeAliases 别名处理器：
        可以为java类型起别名,别名不区分大小写
    -->
    <!--    <typeAliases>-->
    <!--        &lt;!&ndash; -->
    <!--        1、typeAlias:为某个java类型起别名-->
    <!--                type:指定要起别名的类型全类名;-->
    <!--                alias:指定新的别名,不写该属性，默认别名就是类名小写(employee)-->
    <!--         &ndash;&gt;-->
    <!--        <typeAlias type="com.haoqian.config.domain.Employee" alias="emp"/>-->

    <!--        &lt;!&ndash;-->
    <!--         2、package: 为某个包下的所有类批量起别名-->
    <!--              name：指定包名（为当前包以及其子包下的每一个类都起一个默认别名，默认别名是类名小写）-->
    <!--        &ndash;&gt;-->
    <!--        <package name="com.haoqian.config.domain"/>-->

    <!--        &lt;!&ndash; 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 &ndash;&gt;-->
    <!--    </typeAliases>-->

    <!--===================================================================================-->

    <!--
        4、environments：环境配置。mybatis可以配置多种环境,使用default指定使用某种环境的id,可以用来快速切换环境。
            environment：配置一个具体的环境信息(必须有两个标签);id代表环境的唯一标识;
                transactionManager：事务管理器
                    type：事务管理器的类型：
                        - JDBC          (JdbcTransactionFactory.class)
                        - MANAGED       (ManagedTransactionFactory.class)
                        - 自定义事务管理器：实现TransactionFactory接口（type使用其全类名指定）
                dataSource：数据源
                    type:数据源类型
                        - UNPOOLED   (UnpooledDataSourceFactory.class)
                        - POOLED     (PooledDataSourceFactory.class)
                        - JNDI       (JndiDataSourceFactory.class)
                        - 自定义数据源：实现DataSourceFactory接口（type使用其全类名指定）
    -->
    <!--    <environments default="dev_mysql">-->
    <!--        <environment id="dev_mysql">-->
    <!--            <transactionManager type="JDBC"></transactionManager>-->
    <!--            <dataSource type="POOLED">-->
    <!--                <property name="driver" value="${jdbc.driver}"/>-->
    <!--                <property name="url" value="${jdbc.url}"/>-->
    <!--                <property name="username" value="${jdbc.username}"/>-->
    <!--                <property name="password" value="${jdbc.password}"/>-->
    <!--            </dataSource>-->
    <!--        </environment>-->

    <!--        <environment id="dev_oracle">-->
    <!--            <transactionManager type="JDBC"/>-->
    <!--            <dataSource type="POOLED">-->
    <!--                <property name="driver" value="${orcl.driver}"/>-->
    <!--                <property name="url" value="${orcl.url}"/>-->
    <!--                <property name="username" value="${orcl.username}"/>-->
    <!--                <property name="password" value="${orcl.password}"/>-->
    <!--            </dataSource>-->
    <!--        </environment>-->
    <!--    </environments>-->

    <!--===================================================================================-->
    <!--
    5、databaseIdProvider：支持多数据库厂商
            type="DB_VENDOR"（VendorDatabaseIdProvider.class）
                  作用是得到数据库厂商的标识(不同数据库驱动都会提供getDatabaseProductName()方法用于获取)，
                  mybatis就能根据数据库厂商标识来执行不同的sql;
         MySQL，Oracle，SQL Server,xxxx
    注意：spring boot 中这样用不生效，需要向容器中注册一个databaseIdProvider实例（例如数据源配置类DruidConfig中）
  -->
    <!--    <databaseIdProvider type="DB_VENDOR">-->
    <!--        &lt;!&ndash; property 为不同的数据库厂商起别名 &ndash;&gt;-->
    <!--        <property name="MySQL" value="mysql"/>-->
    <!--        <property name="Oracle" value="oracle"/>-->
    <!--        <property name="SQL Server" value="sqlserver"/>-->
    <!--    </databaseIdProvider>-->

    <!--===================================================================================-->

    <!-- 6、mappers：将sql映射文件注册到全局配置文件中
                mapper:注册一个sql映射文件
                    resource：引用类路径下的sql映射文件
                        mybatis/mapper/EmployeeMapper.xml
                    url：引用网路路径或者磁盘路径下的sql映射文件
                        file:///var/mappers/AuthorMapper.xml

                    注册接口
                    class：引用（注册）接口，
                        1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
                        2、没有sql映射文件，所有的sql都是利用注解写在接口上;
                        推荐：
                            比较重要的，复杂的Dao接口我们来写sql映射文件
                            不重要，简单的Dao接口为了开发快速可以使用注解；
    -->
    <!--    <mappers>-->
    <!--        &lt;!&ndash;        <mapper resource="mybatis/mapper/EmployeeMapper.xml"/>&ndash;&gt;-->
    <!--        &lt;!&ndash;        <mapper class="com.haoqian.config.mapper.EmployeeMapper"/>&ndash;&gt;-->
    <!--        &lt;!&ndash; 批量注册： &ndash;&gt;-->
    <!--        <package name="com.haoqian.config.mapper"/>-->
    <!--    </mappers>-->

</configuration>