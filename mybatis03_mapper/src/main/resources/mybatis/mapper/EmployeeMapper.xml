<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
 namespace：名称空间，用来映射哪个mapper接口
 id： 唯一标识，用来映mapper接口中的那个方法
 resultType： 查询结果绑定的实体类类型
 #{id}：从传递过来的参数中，取出id的值
-->
<mapper namespace="com.haoqian.mapper.mapper.EmployeeMapper">

    <!--public Employee getEmpById(Integer id);-->
    <select id="getEmpById" resultType="emp1">
		SELECT * FROM tb_employee WHERE id=#{adc}
	</select>

    <!--public Employee getEmpByIdAndLastName(@Param("e_id") Integer id,@Param("e_name") String lastName);-->
    <select id="getEmpByIdAndLastName" resultType="com.haoqian.mapper.domain.Employee">
 		select * from tb_employee where id = #{e_id} and last_name=#{e_name}
 	</select>

    <!-- public Employee getEmpByMap(Map<String, Object> map); -->
    <select id="getEmpByMap" resultType="com.haoqian.mapper.domain.Employee">
 		select * from ${tableName} where id=${id} and last_name=#{lastName}
 	</select>

    <!--public Employee getEmpByPOJO(Employee employee); -->
    <select id="getEmpByPOJO" resultType="com.haoqian.mapper.domain.Employee">
 		select * from tb_employee where id=#{id} and last_name=#{lastName}
 	</select>

    <!-- public Employee getEmpByList(List<Integer> ids);-->
    <select id="getEmpByList" resultType="com.haoqian.mapper.domain.Employee">
 		select * from tb_employee where id=#{list[0]}
 	</select>


    <!-- public List<Employee> getEmpsByLastNameLike(String lastName); -->
    <!--resultType：如果返回的是一个集合，resultType要写集合中元素的类型  -->
    <select id="getEmpsByLastNameLike" resultType="com.haoqian.mapper.domain.Employee">
		select * from tb_employee where last_name like #{lastName}
	</select>

    <!--public Map<String, Object> getEmpByIdReturnMap(Integer id);  -->
    <select id="getEmpByIdReturnMap" resultType="map">
 		select * from tb_employee where id=#{id}
 	</select>

    <!--public Map<Integer, Employee> getEmpByLastNameLikeReturnMap(String lastName);  -->
    <select id="getEmpsReturnMap" resultType="com.haoqian.mapper.domain.Employee">
 		select * from tb_employee where last_name like #{lastName}
 	</select>

	<select id="getEmpsByDeptId" resultType="com.haoqian.mapper.domain.Employee">
		select * from tb_employee where d_id=#{deptId}
	</select>
    <!--==================================================================================================================-->

    <!--public int insertEmployee(Employee employee);-->
    <!-- parameterType：参数类型，可以省略，
		获取自增主键的值：
			mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
			useGeneratedKeys="true"；使用自增主键获取主键值策略
			keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
	-->
    <insert id="insertEmployee" parameterType="com.haoqian.mapper.domain.Employee"
            useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
		insert into tb_employee(last_name,email,gender)
		values(#{lastName},#{email},#{gender})
	</insert>

    <!--
        获取非自增主键的值：
            Oracle不支持自增,Oracle使用序列来模拟自增；
            每次插入的数据的主键是从序列中拿到的值；
    -->
    <insert id="insertEmployee" databaseId="oracle">
        <!--
            keyProperty: 查出的主键值封装给javaBean的哪个属性；
            resultType: 查出的数据(主键)的返回值类型；
            order="BEFORE": 当前查主键sql在插入sql之前运行，先运行<selectKey>查询id的sql；
                            将查出id值封装给javaBean的指定属性，再运行插入的sql；
                   AFTER  ：当前查主键sql在插入sql之后运行，	先运行插入的sql
                            (在sql语句中从序列取出新值作为id);再运行<selectKey>查询id的sql；
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 查询主键的sql语句 -->
            <!-- BEFORE:从序列中获取下一个值-->
            select EMPLOYEES_SEQ.nextval from dual
            <!-- AFTER:从序列中获取当前值-->
            select EMPLOYEES_SEQ.currval from dual
        </selectKey>
        <!-- BEFORE：插入时的主键是从<selectKey>中拿到的-->
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{email<!-- ,jdbcType=NULL -->})
        <!-- AFTER：插入时的主键是从sql中的employees_seq.nextval拿到的-->
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(employees_seq.nextval,#{lastName},#{email,jdbcType=NULL})
    </insert>

    <!--==================================================================================================================-->

    <!--public int updateEmp(Employee employee);-->
    <update id="updateEmp">
		update tb_employee
		set last_name=#{lastName},email=#{email},gender=#{gender}
		where id=#{id}
	</update>

    <!--==================================================================================================================-->

    <!--public int deleteEmpById(Integer id);-->
    <delete id="deleteEmpById">
		delete from tb_employee where id=#{id}
	</delete>

</mapper>